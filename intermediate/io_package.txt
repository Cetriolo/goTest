package main

import (
	"bytes"
	"fmt"
	"io"
	"log"
	"os"
	"strings"
)

func readFromReader(r io.Reader) {
	buf := make([]byte, 1024)
	n, err := r.Read(buf)
	if err != nil {
		log.Fatalln(err)
	}
	// Process the read data
	fmt.Println(string(buf[:n]))

}

func writeToWriter(w io.Writer, data string) {
	_, err := w.Write([]byte(data))
	if err != nil {
		log.Fatalln(err)
	}

}

func closeResource(c io.Closer) {
	err := c.Close()
	if err != nil {
		log.Fatalln(err)
	}
}

func bufferExample() {
	var buf bytes.Buffer
	buf.WriteString("Hello, buffer")
	fmt.Println("Buffer content:", buf.String())
}

func multiReaderExample() {
	r1 := strings.NewReader("Hello, ")
	r2 := strings.NewReader("world!")
	mr := io.MultiReader(r1, r2)
	buf := new(bytes.Buffer)
	_, err := buf.ReadFrom(mr)
	if err != nil {
		log.Fatalln(err)
	}
	fmt.Println("MultiReader content:", buf.String())
}

func pipeExample() {
	pr, pw := io.Pipe()
	go func() {
		pw.Write([]byte("Hello from pipe!"))
		pw.Close()
	}()
	buf := new(bytes.Buffer)
	buf.ReadFrom(pr)
	fmt.Println("Pipe content:", buf.String())
}

func writeToFile(filepath string, data string) {
	file, err := os.OpenFile(filepath, os.O_APPEND|os.O_CREATE|os.O_WRONLY, 0644)
	if err != nil {
		log.Fatalln(err)
	}
	defer closeResource(file)
	// _, err = file.Write([]byte(data))
	// if err != nil {
	// 	log.Fatalln(err)
	// }

	writer := io.Writer(file)

	// _, err = writer.Write([]byte(data))
	// if err != nil {
	// 	log.Fatalln(err)
	// }

	writeToWriter(writer, data)
}

func main() {

	// data, err := os.ReadFile("examples.txt")
	// if err != nil {
	// 	log.Fatalln(err)
	// }
	// readFromReader(bytes.NewReader(data))
	// if err != nil {
	// 	log.Fatalln(err)
	// }

	// reader := bufio.NewReader(bytes.NewReader(data))
	// line, err := reader.ReadString('\n')
	// if err != nil {
	// 	log.Fatalln(err)
	// }
	// fmt.Print("First line of file:", line)

	// writer := bufio.NewWriter(bytes.NewBuffer(data))

	// readFromReader(reader)
	// fmt.Println("Reading from reader")
	// writeToWriter(writer, "Writing to buffer")
	// writer.Flush()

	fmt.Println("==READ==")
	readFromReader(strings.NewReader("Hello, world!"))

	fmt.Println("==WRITE==")
	var writer bytes.Buffer
	writeToWriter(&writer, "Hello, world!")
	fmt.Println("Buffer content:", writer.String())

	fmt.Println("==BUFFER==")

	bufferExample()
	fmt.Println("==MULTIBUFFER==")

	multiReaderExample()
	fmt.Println("==PIPE==")
	pipeExample()

	fmt.Println("==WRITE TO FILE==")
	writeToFile("output.txt", "Hello, file!\n")

	resource := MyResource{name: "MyResource"}
	resource.name = "UpdatedResource"
	fmt.Println("Resource name:", resource.name)
	defer closeResource(resource)

}

type MyResource struct {
	name string
}

func (m MyResource) Close() error {
	fmt.Println("Closing resource:", m.name)
	return nil
}
