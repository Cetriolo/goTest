package main

import (
	"fmt"
	"math/rand"
	"testing"
)

func Add(a, b int) int {
	return a + b
}

func TestAddTableDriven(t *testing.T) {
	test := []struct{ a, b, expected int }{
		{2, 3, 5},
		{0, 0, 0},
		{-1, -1, -2},
		{100, 200, 300},
	}

	for _, test := range test {
		result := Add(test.a, test.b)
		if result != test.expected {
			t.Errorf("Expected %d + %d to equal %d, but got %d", test.a, test.b, test.expected, result)
		}
	}

}

func TestAddSubtests(t *testing.T) {
	tests := []struct{ a, b, expected int }{
		{2, 3, 5}, {0, 0, 0}, {-1, 1, 0},
	}
	for _, test := range tests {
		t.Run(fmt.Sprintf("%d + %d", test.a, test.b), func(t *testing.T) {
			result := Add(test.a, test.b)
			if result != test.expected {
				t.Errorf("Expected %d + %d to equal %d, but got %d", test.a, test.b, test.expected, result)
				// You can add more context here if needed
			}
		})
	}
}

// func TestAdd(t *testing.T) {
// 	result := Add(2, 3)
// 	if result != 5 {
// 		t.Errorf("Expected 5, but got %d", result)
// 	}
// 	log.Println("TestAdd passed")

// }

// func BenchmarkAddSmallInput(b *testing.B) {
// 	for i := 0; i < b.N; i++ {
// 		Add(2, 3)
// 	}
// }
// func BenchmarkAddMediumInput(b *testing.B) {
// 	for i := 0; i < b.N; i++ {
// 		Add(1000, 2000)
// 	}
// }
// func BenchmarkAddLargeInput(b *testing.B) {
// 	for i := 0; i < b.N; i++ {
// 		Add(1000000, 2000000)
// 	}
// }

//go test -bench=. -benchmem \testing_test.go | grep -v 'cpu:'

func GenerateRandomSlice(i int) []int {
	slice := make([]int, i)
	for j := 0; j < i; j++ {
		slice[j] = rand.Intn(100)
	}
	return slice
}

func SumSlice(s []int) int {
	sum := 0
	for _, v := range s {
		sum += v
	}
	return sum
}

func TestGenerateRandomSlice(t *testing.T) {
	size := 100
	slice := GenerateRandomSlice(size)
	if len(slice) != size {
		t.Errorf("Expected slice of length %d, but got %d", size, len(slice))
	}

}

func BenchmarkRandomSliceGenerator(b *testing.B) {
	for range b.N {
		GenerateRandomSlice(1000)
	}
}

func BenchmarkSumSlice(b *testing.B) {
	slice := GenerateRandomSlice(1000)
	b.ResetTimer()
	for range b.N {
		SumSlice(slice)
	}
}
