package main

import (
	"fmt"
	"sort"
)

type Person struct {
	Name string
	Age  int
}

type By func(p1, p2 *Person) bool

type personSorter struct {
	people []Person
	by     func(p1, p2 *Person) bool
}

func (s *personSorter) Len() int { return len(s.people) }
func (s *personSorter) Less(i, j int) bool {
	return s.by(&s.people[i], &s.people[j])
}
func (s *personSorter) Swap(i, j int) {
	s.people[i], s.people[j] = s.people[j], s.people[i]
}

func (by By) Sort(people []Person) {
	ps := &personSorter{
		people: people,
		by:     by,
	}
	sort.Sort(ps)
}

// type ByAge []Person

// func (a ByAge) Len() int           { return len(a) }
// func (a ByAge) Less(i, j int) bool { return a[i].Age < a[j].Age }
// func (a ByAge) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }

// type ByName []Person

// func (a ByName) Len() int           { return len(a) }
// func (a ByName) Less(i, j int) bool { return a[i].Name < a[j].Name }
// func (a ByName) Swap(i, j int)      { a[i], a[j] = a[j], a[i] }

func main() {
	// number := []int{5, 3, 4, 1, 2}
	// sort.Ints(number)
	// fmt.Println(number)

	// stringSlice := []string{"banana", "apple", "cherry", "date"}
	// sort.Strings(stringSlice)
	// fmt.Println(stringSlice)

	people := []Person{
		{"Alice", 30},
		{"Bob", 25},
		{"Charlie", 35},
	}
	fmt.Println(people)

	age := func(p1, p2 *Person) bool {
		return p1.Age < p2.Age
	}
	By(age).Sort(people)
	fmt.Println(people)
	// peopleByAge := ByAge(people)
	// sort.Sort(peopleByAge)
	// fmt.Println(peopleByAge)

	// peopleByName := ByName(people)
	// fmt.Println(peopleByName)
	// sort.Sort(peopleByName)
	// fmt.Println(peopleByName)
	// fmt.Println("Sorted by age and name successfully.")

	stringSlice := []string{"banana", "apple", "cherry", "date"}
	sort.Slice(stringSlice, func(i, j int) bool {
		return stringSlice[i][len(stringSlice[i])-1] < stringSlice[j][len(stringSlice[j])-1]
	})
	fmt.Println(stringSlice)

}
