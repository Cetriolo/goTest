package main

import (
	"fmt"
	"time"
)

func main() {
	// done := make(chan struct{})

	// go func() {
	// 	fmt.Println("Goroutine started")
	// 	time.Sleep(2 * time.Second)
	// 	done <- struct{}{}
	// }()
	// <-done

	// fmt.Println("Main goroutine finished")

	// ch := make(chan int)

	// go func() {
	// 	ch <- 9
	// 	fmt.Println("Goroutine finished sending value")
	// }()
	// value := <-ch
	// time.Sleep(1 * time.Second)
	// fmt.Println("Received value:", value)
	// numRoutines := 3
	// done := make(chan int, numRoutines)

	// for i := range numRoutines {
	// 	go func(id int) {
	// 		fmt.Printf("Goroutine %d started\n", id)
	// 		time.Sleep(1 * time.Second)
	// 		done <- id
	// 	}(i)
	// }
	// for range numRoutines {
	// 	<-done
	// }

	// ==SYNC==
	data := make(chan string)
	go func() {
		for i := range 5 {
			data <- "Hello " + fmt.Sprint('0'+i)
			time.Sleep(100 * time.Millisecond)

		}
		close(data)
	}()

	for value := range data {
		fmt.Println("Received:", value, ":", time.Now())
	}

}
