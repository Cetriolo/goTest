package main

import (
	"fmt"
	"time"
)

// func main() {
// 	ticker := time.NewTicker(5 * time.Second)
// 	defer ticker.Stop()

// 	go func() {
// 		for {
// 			select {
// 			case <-ticker.C:
// 				fmt.Println("Tick")
// 			}
// 		}
// 	}()

// 	time.Sleep(20 * time.Second)
// }

// func main() {
// 	ticker := time.NewTicker(2 * time.Second)
// 	defer ticker.Stop()

// 	i := 1
// 	for tick := range ticker.C {
// 		i *= 2
// 		fmt.Printf("Tick %d: %d\n", i, tick.Unix())
// 	}

// }

// func periodicTask() {
// 	fmt.Println("Periodic task executed at", time.Now().Format(time.RFC3339))
// }
// func main() {
// 	ticker := time.NewTicker(3 * time.Second)
// 	defer ticker.Stop()
// 	for {
// 		select {
// 		case <-ticker.C:
// 			periodicTask()
// 		}
// 	}

// }

func main() {
	ticker := time.NewTicker(1 * time.Second)

	stop := time.After(5 * time.Second)
	defer ticker.Stop()

	for {

		select {
		case tick := <-ticker.C:
			fmt.Println("Tick at", tick)
		case <-stop:
			fmt.Println("Stopping ticker at", stop)
			return
		}
	}
}
