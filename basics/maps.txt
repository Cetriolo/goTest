package main

import (
	"fmt"
	"maps"
)

func main() {

	var mappa map[string]int

	var map1 = make(map[string]int)

	map2 := map[string]int{
		"one":   1,
		"two":   2,
		"three": 3,
	}
	fmt.Println(mappa)
	fmt.Println(map1)
	fmt.Println(map2)

	myMap := make(map[string]int)

	myMap["key1"] = 1
	myMap["key2"] = 2
	myMap["key3"] = 3
	// fmt.Println(myMap)
	// fmt.Println(myMap["key3"])
	// fmt.Println(myMap["key4"])
	// delete(myMap, "key2")
	// fmt.Println(myMap)
	// clear(myMap)

	fmt.Println(myMap)

	value, unknownvalue := myMap["key4"]
	fmt.Println(value, unknownvalue)

	myMap2 := map[string]int{"a": 1, "b": 2, "c": 3}

	fmt.Println(myMap2)

	if maps.Equal(myMap, myMap2) {
		fmt.Println("Maps are equal")
	} else {
		fmt.Println("Maps are not equal")
	}

	for k, v := range myMap {
		fmt.Println(k, v)
	}

	for _, v := range myMap {
		fmt.Println(v)
	}

	_, ok := myMap["key1"]
	if ok {
		fmt.Println("Key1 exists in myMap")
	}

	var myNilMap map[string]string
	if myNilMap == nil {
		fmt.Println("myNilMap is nil")
		fmt.Println(myNilMap)
	}
	myNilMap = make(map[string]string)
	myNilMap["key1"] = "value1"
	myNilMap["key2"] = "value2"
	myNilMap["key3"] = "value3"
	fmt.Println(myNilMap)
	fmt.Println(len(myNilMap))

	myMap5 := make(map[string]map[string]int)
	myMap5["outer"] = make(map[string]int)
	myMap5["outer"]["inner"] = 1
	fmt.Println(myMap5)

	var number int = 10

	number1 := number

	var number2 *int = &number

	fmt.Println("number1:", number1)
	fmt.Println("number2:", &number2)
}
